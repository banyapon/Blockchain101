// --- DOM Elements ---
const boardElement = document.getElementById("board");
const playerElement = document.getElementById("player");
const rollButton = document.getElementById("roll-button");
const diceDisplay = document.getElementById("dice-display");
const healthDisplay = document.getElementById("player-health");
const attackDisplay = document.getElementById("player-attack");
const ownedWeaponsList = document.getElementById("owned-weapons-list");
const messageLog = document.getElementById("message-log");
const modal = document.getElementById("modal");
const modalContent = document.getElementById("modal-content");
const connectButton = document.getElementById("connect-button");
const walletInfo = document.getElementById("wallet-info");
const walletAddressDisplay = document.getElementById("wallet-address");

// --- Web3 State ---
let provider, signer, userAddress, contract;
const targetChainId = "0x7a69"; // 31337 in hex (Hardhat Network)

// !!! IMPORTANT: Fill in your deployed contract address here !!!
const contractAddress = "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0";

const contractABI = [
  "constructor()",
  "function getMyWeapons() view returns (tuple(string itemName, string description, string image, bool isUsed, address owner)[])",
  "function getWeapon(uint256) view returns (tuple(string itemName, string description, string image, bool isUsed, address owner))",
  "function markAsUsed(uint256)",
  "function mintWeapon(address, string, string, string)",
  "function name() view returns (string)",
  "function nextTokenId() view returns (uint256)",
  "function owner() view returns (address)",
  "function ownerWeapons(address, uint256) view returns (uint256)",
  "function symbol() view returns (string)",
  "function useWeapon(uint256)",
  "function weapons(uint256) view returns (string, string, string, bool, address)",
];

// --- Game State ---
let playerPosition = 0;
let playerHealth = 100;
let playerAttack = 0;
let ownedWeaponIds = [];
let isMoving = false;

const weaponsData = {
  1: {
    name: "Fire Sword",
    desc: "A blazing blade engulfed in searing flames.",
    image:
      "https://cyan-defeated-booby-344.mypinata.cloud/ipfs/bafybeidx4kct47zpldzvcsmanjzl2ybao4qfeewiw7257mcy4y2xgxou3m/nft_1.png",
    attack: 10,
  },
  2: {
    name: "Ice Sword",
    desc: "A frigid blade of enchanted ice that freezes all in its path.",
    image:
      "https://cyan-defeated-booby-344.mypinata.cloud/ipfs/bafybeidx4kct47zpldzvcsmanjzl2ybao4qfeewiw7257mcy4y2xgxou3m/nft_2.png",
    attack: 15,
  },
  3: {
    name: "Flame Thunder",
    desc: "A sword wreathed in roaring flames and crackling with thunder.",
    image:
      "https://cyan-defeated-booby-344.mypinata.cloud/ipfs/bafybeidx4kct47zpldzvcsmanjzl2ybao4qfeewiw7257mcy4y2xgxou3m/nft_3.png",
    attack: 20,
  },
  4: {
    name: "Magic Dagger",
    desc: "A silent blade forged in shadow that strikes before you‚Äôre seen.",
    image:
      "https://cyan-defeated-booby-344.mypinata.cloud/ipfs/bafybeidx4kct47zpldzvcsmanjzl2ybao4qfeewiw7257mcy4y2xgxou3m/nft_4.png",
    attack: 12,
  },
  5: {
    name: "Soul Sword",
    desc: "A radiant sword that channels the light of departed souls.",
    image:
      "https://cyan-defeated-booby-344.mypinata.cloud/ipfs/bafybeidx4kct47zpldzvcsmanjzl2ybao4qfeewiw7257mcy4y2xgxou3m/nft_5.png",
    attack: 18,
  },
  6: {
    name: "Meteior Sword",
    desc: "A celestial blade forged from a blazing meteorite.",
    image:
      "https://cyan-defeated-booby-344.mypinata.cloud/ipfs/bafybeidx4kct47zpldzvcsmanjzl2ybao4qfeewiw7257mcy4y2xgxou3m/nft_6.png",
    attack: 12,
  },
  7: {
    name: "Dark Sword",
    desc: "A cursed sword steeped in shadow that feeds on fear.",
    image:
      "https://cyan-defeated-booby-344.mypinata.cloud/ipfs/bafybeidx4kct47zpldzvcsmanjzl2ybao4qfeewiw7257mcy4y2xgxou3m/nft_7.png",
    attack: 18,
  },
  8: {
    name: "Time Traveler Sword",
    desc: "A time-bending blade that cuts through past, present, and future.",
    image:
      "https://cyan-defeated-booby-344.mypinata.cloud/ipfs/bafybeidx4kct47zpldzvcsmanjzl2ybao4qfeewiw7257mcy4y2xgxou3m/nft_8.png",
    attack: 12,
  },
  9: {
    name: "Enlighten Sword",
    desc: "A luminous blade imbued with the wisdom of the ancients.",
    image:
      "https://cyan-defeated-booby-344.mypinata.cloud/ipfs/bafybeidx4kct47zpldzvcsmanjzl2ybao4qfeewiw7257mcy4y2xgxou3m/nft_9.png",
    attack: 18,
  },
};
const totalItems = Object.keys(weaponsData).length;

let boardLayout = [];
const boardSize = 6;
const totalTiles = boardSize * 4 - 4;

// --- Utility Functions ---
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

function generateRandomBoardLayout() {
  const newLayout = Array(totalTiles).fill(null);

  // --- UPDATED ICONS ---
  newLayout[0] = { type: "start", icon: "üèÅ" };
  const cornerImage = "images/redcastle.png";
  newLayout[boardSize - 1] = {
    type: "corner",
    name: "Castle",
    image: cornerImage,
  };
  newLayout[(boardSize - 1) * 2] = {
    type: "corner",
    name: "Castle",
    image: cornerImage,
  };
  newLayout[(boardSize - 1) * 3] = {
    type: "corner",
    name: "Castle",
    image: cornerImage,
  };

  const availableIndices = [];
  for (let i = 1; i < totalTiles; i++) {
    if (newLayout[i] === null) availableIndices.push(i);
  }
  shuffleArray(availableIndices);

  const itemImage = "images/weapon.png";
  const itemsToPlace = Object.keys(weaponsData).map((id) => ({
    type: "item",
    name: "Weapon",
    image: itemImage,
    weaponId: parseInt(id),
  }));

  const monstersToPlace = [
    { type: "monster", name: "Goblin", image: "images/goblin.png", power: 10 },
    { type: "monster", name: "Ghost", image: "images/ghost.png", power: 15 },
    { type: "monster", name: "Dragon", image: "images/dragon.png", power: 25 },
    { type: "monster", name: "Ark", image: "images/ark.png", power: 12 },
    { type: "monster", name: "Wolf", image: "images/wolve.png", power: 18 },
    { type: "monster", name: "Caster", image: "images/caster.png", power: 22 },
    { type: "monster", name: "Snake", image: "images/snake.png", power: 14 },
    {
      type: "monster",
      name: "Scorpion",
      image: "images/sporpion.png",
      power: 19,
    },
    { type: "monster", name: "Bat", image: "images/bat.png", power: 8 },
    { type: "monster", name: "Golem", image: "images/golem.png", power: 30 },
  ];
  shuffleArray(monstersToPlace);

  itemsToPlace.forEach((item) => {
    if (availableIndices.length > 0) newLayout[availableIndices.pop()] = item;
  });
  monstersToPlace.forEach((monster) => {
    if (availableIndices.length > 0)
      newLayout[availableIndices.pop()] = monster;
  });
  availableIndices.forEach((index) => {
    newLayout[index] = { type: "empty" };
  });

  return newLayout;
}

// --- Web3 Functions ---
async function connectWallet() {
  if (typeof window.ethereum === "undefined") {
    logMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MetaMask!");
    showSimpleModal(
      "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      "‡πÑ‡∏°‡πà‡∏û‡∏ö MetaMask, ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Extension ‡πÉ‡∏ô Browser ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
    );
    return;
  }
  if (
    contractAddress === "YOUR_CONTRACT_ADDRESS_HERE" ||
    contractAddress.length !== 42
  ) {
    logMessage("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Contract Address!");
    showSimpleModal(
      "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Contract Address ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô"
    );
    return;
  }

  try {
    provider = new ethers.BrowserProvider(window.ethereum);
    const network = await provider.getNetwork();

    if (network.chainId.toString() !== parseInt(targetChainId, 16).toString()) {
      logMessage(
        `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ChainID: ${parseInt(targetChainId, 16)}`
      );
      showSimpleModal(
        "‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÉ‡∏ô MetaMask ‡πÄ‡∏õ‡πá‡∏ô Hardhat (ChainID: ${parseInt(
          targetChainId,
          16
        )})`
      );
      return;
    }

    signer = await provider.getSigner();
    userAddress = await signer.getAddress();
    contract = new ethers.Contract(contractAddress, contractABI, signer);

    walletAddressDisplay.textContent = userAddress;
    walletInfo.classList.remove("hidden");
    connectButton.textContent = "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
    connectButton.disabled = true;
    connectButton.classList.add("bg-green-600", "cursor-not-allowed");
    connectButton.classList.remove("bg-orange-500", "hover:bg-orange-600");
    rollButton.disabled = false;

    logMessage(
      `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Wallet: ${userAddress.substring(
        0,
        6
      )}...${userAddress.substring(userAddress.length - 4)}`
    );
    await updateOwnedWeapons();
  } catch (error) {
    console.error("Could not connect to wallet:", error);
    logMessage("‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wallet ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    showSimpleModal(
      "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Wallet ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    );
  }
}

async function updateOwnedWeapons() {
  if (!contract) return;
  try {
    const weapons = await contract.getMyWeapons();
    ownedWeaponIds = [];
    playerAttack = 0;
    ownedWeaponsList.innerHTML = "";

    if (weapons.length === 0) {
      ownedWeaponsList.innerHTML =
        '<span class="text-gray-400">- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ -</span>';
    } else {
      weapons.forEach((weapon) => {
        const weaponId = Object.keys(weaponsData).find(
          (key) => weaponsData[key].image === weapon.image
        );
        if (weaponId) {
          const parsedWeaponId = parseInt(weaponId);
          if (!ownedWeaponIds.includes(parsedWeaponId)) {
            ownedWeaponIds.push(parsedWeaponId);
            playerAttack += weaponsData[parsedWeaponId].attack;
          }
        }
        const li = document.createElement("div");
        li.classList.add("owned-weapon-item");
        li.innerHTML = `
                            <img src="${weapon.image}" alt="${weapon.itemName}" onerror="this.onerror=null;this.src='https://placehold.co/32x32/333/fff?text=NFT';">
                            <span>${weapon.itemName}</span>
                        `;
        ownedWeaponsList.appendChild(li);
      });
    }
    updateUI();
    checkWinCondition();
  } catch (error) {
    console.error("Failed to fetch weapons:", error);
    logMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò‡πÑ‡∏î‡πâ");
  }
}

async function mintWeapon(weaponId) {
  const weapon = weaponsData[weaponId];
  if (!contract || !weapon) return;

  showSimpleModal(
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á Mint...",
    `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á NFT "${weapon.name}"... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ô MetaMask`
  );

  try {
    const tx = await contract.mintWeapon(
      userAddress,
      weapon.name,
      weapon.desc,
      weapon.image
    );
    logMessage(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Transaction: ${tx.hash.substring(0, 10)}...`);

    await tx.wait();

    logMessage(`Mint ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö "${weapon.name}"`);
    showSimpleModal(
      "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö "${weapon.name}" ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà Wallet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß`,
      false,
      weapon.image
    );

    await updateOwnedWeapons();
  } catch (error) {
    console.error("Minting failed:", error);
    logMessage("‡∏Å‡∏≤‡∏£ Mint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    showSimpleModal("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‡∏Å‡∏≤‡∏£ Mint ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console");
  }
}

// --- Game Logic ---
function initializeGame() {
  playerPosition = 0;
  playerHealth = 100;
  playerAttack = 0;
  ownedWeaponIds = [];
  isMoving = false;
  boardLayout = generateRandomBoardLayout();
  createBoard();
  updateUI();
  requestAnimationFrame(() => {
    updatePlayerPosition();
  });
}

function createBoard() {
  boardElement.innerHTML = "";
  let tileIndex = 0;
  for (let row = 0; row < boardSize; row++) {
    for (let col = 0; col < boardSize; col++) {
      const tileDiv = document.createElement("div");
      if (
        row === 0 ||
        row === boardSize - 1 ||
        col === 0 ||
        col === boardSize - 1
      ) {
        const tileData = boardLayout[tileIndex];
        tileDiv.id = `tile-${tileIndex}`;
        tileDiv.classList.add("tile", tileData.type);
        if (tileData.weaponId) tileDiv.dataset.weaponId = tileData.weaponId;

        if (tileData.image) {
          const img = document.createElement("img");
          img.src = tileData.image;
          img.alt = tileData.name || tileData.type;
          img.classList.add("tile-image");
          tileDiv.appendChild(img);
        } else if (tileData.icon) {
          const span = document.createElement("span");
          span.classList.add("tile-icon");
          span.textContent = tileData.icon;
          tileDiv.appendChild(span);
        }
        tileIndex++;
      } else {
        tileDiv.classList.add("inner-tile");
      }
      boardElement.appendChild(tileDiv);
    }
  }
}

function getTileCoordinates(index) {
  if (!boardElement.clientWidth) return { top: 0, left: 0 };
  const tileWidth = boardElement.clientWidth / boardSize;
  const tileHeight = boardElement.clientHeight / boardSize;
  const playerSize = playerElement.offsetWidth;
  let row, col;

  if (index <= boardSize - 1) {
    // Top row
    row = 0;
    col = index;
  } else if (index <= (boardSize - 1) * 2) {
    // Right column
    col = boardSize - 1;
    row = index - (boardSize - 1);
  } else if (index <= (boardSize - 1) * 3) {
    // Bottom row
    row = boardSize - 1;
    col = (boardSize - 1) * 3 - index;
  } else {
    // Left column
    row = (boardSize - 1) * 4 - index;
    col = 0;
  }

  return {
    top: row * tileHeight + tileHeight / 2 - playerSize / 2,
    left: col * tileWidth + tileWidth / 2 - playerSize / 2,
  };
}

function updatePlayerPosition() {
  const { top, left } = getTileCoordinates(playerPosition);
  playerElement.style.top = `${top}px`;
  playerElement.style.left = `${left}px`;

  const playerSize = (boardElement.clientWidth / boardSize) * 0.8;
  playerElement.style.width = `${playerSize}px`;
  playerElement.style.height = `${playerSize}px`;
}

function logMessage(msg) {
  const p = document.createElement("p");
  p.textContent = `> ${msg}`;
  messageLog.appendChild(p);
  messageLog.scrollTop = messageLog.scrollHeight;
}

function updateUI() {
  healthDisplay.textContent = Math.max(0, playerHealth);
  attackDisplay.textContent = playerAttack;

  document.querySelectorAll(".tile.item").forEach((tileEl) => {
    const weaponId = parseInt(tileEl.dataset.weaponId);
    if (ownedWeaponIds.includes(weaponId)) {
      tileEl.classList.add("owned-item-tile");
    } else {
      tileEl.classList.remove("owned-item-tile");
    }
  });

  if (playerHealth <= 0) {
    showSimpleModal("‡∏à‡∏ö‡πÄ‡∏Å‡∏°", "‡∏Ñ‡∏∏‡∏ì‡∏û‡πà‡∏≤‡∏¢‡πÅ‡∏û‡πâ... ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏´‡∏°‡∏î‡∏•‡∏á", true);
    rollButton.disabled = true;
  }
}

function showSimpleModal(title, text, isGameOver = false, imageUrl = null) {
  modal.classList.remove("hidden");
  let imageHtml = "";
  if (imageUrl) {
    imageHtml = `<img src="${imageUrl}" alt="${title}" class="w-32 h-32 mx-auto mb-4 rounded-lg object-contain shadow-lg" onerror="this.onerror=null;this.src='https://placehold.co/128x128/333/fff?text=IMG';">`;
  }
  modalContent.innerHTML = `
                <h2 class="text-2xl font-bold mb-4 text-red-500">${title}</h2>
                ${imageHtml}
                <p class="mb-6 text-gray-300">${text}</p>
                <button id="modal-button" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg">‡∏ï‡∏Å‡∏•‡∏á</button>
            `;
  const modalButton = document.getElementById("modal-button");
  if (isGameOver) {
    modalButton.textContent = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà";
    modalButton.onclick = () => location.reload();
  } else {
    modalButton.onclick = () => modal.classList.add("hidden");
  }
}

function showMintModal(weaponId) {
  const weapon = weaponsData[weaponId];
  if (!weapon) return;

  modal.classList.remove("hidden");
  modalContent.innerHTML = `
                <h2 class="text-2xl font-bold mb-2 text-yellow-400">‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°!</h2>
                <img src="${weapon.image}" alt="${weapon.name}" class="w-48 h-48 mx-auto my-4 rounded-lg object-cover shadow-lg border-2 border-gray-500" onerror="this.onerror=null;this.src='https://placehold.co/192x192/333/fff?text=NFT';">
                <h3 class="text-xl font-semibold text-white">${weapon.name}</h3>
                <p class="text-gray-400 my-2">${weapon.desc}</p>
                <p class="text-yellow-400 font-bold">‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ: +${weapon.attack}</p>
                <div class="flex gap-4 justify-center mt-6">
                    <button id="mint-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-lg">Mint NFT</button>
                    <button id="cancel-btn" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg">‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à</button>
                </div>
            `;
  document.getElementById("mint-btn").onclick = () => mintWeapon(weaponId);
  document.getElementById("cancel-btn").onclick = () =>
    modal.classList.add("hidden");
}

async function rollDice() {
  if (isMoving || playerHealth <= 0 || !contract) return;

  isMoving = true;
  rollButton.disabled = true;
  diceDisplay.classList.add("rolling");

  const roll = Math.floor(Math.random() * 6) + 1;

  await new Promise((resolve) => setTimeout(resolve, 500));
  diceDisplay.textContent = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"][roll - 1];
  diceDisplay.classList.remove("rolling");
  logMessage(`‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ ${roll} ‡πÅ‡∏ï‡πâ‡∏°!`);

  await movePlayer(roll);

  isMoving = false;
  if (playerHealth > 0) rollButton.disabled = false;
}

async function movePlayer(steps) {
  for (let i = 0; i < steps; i++) {
    playerPosition = (playerPosition + 1) % totalTiles;
    updatePlayerPosition();
    await new Promise((resolve) => setTimeout(resolve, 250));
  }
  handleTileAction();
}

function handleTileAction() {
  const tileData = boardLayout[playerPosition];
  const tileType = tileData.type;
  const logText = tileData.name ? `${tileType}: ${tileData.name}` : tileType;
  logMessage(`‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏ä‡πà‡∏≠‡∏á: ${logText}`);

  switch (tileType) {
    case "item":
      if (!ownedWeaponIds.includes(tileData.weaponId)) {
        logMessage(`‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° "${weaponsData[tileData.weaponId].name}"!`);
        showMintModal(tileData.weaponId);
      } else {
        logMessage(`‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß`);
      }
      break;
    case "monster":
      fightMonster(tileData);
      break;
    default:
      logMessage("‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤... ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠");
      break;
  }
}

function fightMonster(monster) {
  logMessage(`‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏à‡∏≠‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ${monster.name} (‡∏û‡∏•‡∏±‡∏á: ${monster.power})!`);
  const playerRoll = Math.floor(Math.random() * 20) + 1 + playerAttack;
  const monsterRoll = Math.floor(Math.random() * 20) + monster.power / 2;

  if (playerRoll >= monsterRoll) {
    logMessage(
      `‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞! (‡∏Ñ‡∏∏‡∏ì: ${playerRoll.toFixed(
        0
      )} vs ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå: ${monsterRoll.toFixed(0)})`
    );
    showSimpleModal(
      "‡∏ä‡∏ô‡∏∞!",
      `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏≤‡∏ä‡∏ô‡∏∞ ${monster.name} ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`,
      false,
      monster.image
    );
  } else {
    const damage = monster.power + Math.floor(Math.random() * 10);
    playerHealth -= damage;
    logMessage(
      `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ! ‡πÇ‡∏î‡∏ô‡πÇ‡∏à‡∏°‡∏ï‡∏µ ${damage} ‡∏î‡∏≤‡πÄ‡∏°‡∏à (‡∏Ñ‡∏∏‡∏ì: ${playerRoll.toFixed(
        0
      )} vs ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå: ${monsterRoll.toFixed(0)})`
    );
    showSimpleModal(
      "‡∏û‡πà‡∏≤‡∏¢‡πÅ‡∏û‡πâ",
      `‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å ${monster.name} ‡πÇ‡∏à‡∏°‡∏ï‡∏µ! ‡πÄ‡∏™‡∏µ‡∏¢‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ${damage} ‡∏´‡∏ô‡πà‡∏ß‡∏¢`,
      false,
      monster.image
    );
    updateUI();
  }
}

function startNewLevel() {
  logMessage("‡∏î‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà...");
  showSimpleModal("‡∏î‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÑ‡∏õ!");
  ownedWeaponIds = [];
  playerAttack = 0;
  boardLayout = generateRandomBoardLayout();
  createBoard();
  updateUI();
  playerPosition = 0;
  updatePlayerPosition();
}

function checkWinCondition() {
  if (ownedWeaponIds.length === totalItems) {
    startNewLevel();
  }
}

// --- Event Listeners ---
connectButton.addEventListener("click", connectWallet);
rollButton.addEventListener("click", rollDice);
window.addEventListener("resize", updatePlayerPosition);
window.addEventListener("DOMContentLoaded", initializeGame);
